target Rust {
    single-file-project: true
};

reactor Ping(count: u32(1000000)) {
    input receive: u32;
    output send: u32;
    state pingsLeft: u32(count);
    logical action serve;

    reaction(startup, serve) -> send {=
        ctx.set(send, self.pingsLeft);
        self.pingsLeft -= 1;
    =}

    reaction (receive) -> serve {=
        if self.pingsLeft > 0 {
            ctx.schedule(serve, Asap);
        } else {
            ctx.request_stop();
        }
    =}
}

reactor Pong(expected: u32(1000000)) {
    input receive: u32;
    output send: u32;
    state count: u32(0);

    reaction(receive) -> send {=
        self.count += 1;
        ctx.set(send, ctx.get(receive).unwrap());
    =}

    reaction(shutdown) {=
        if self.count != params.expected {
            panic!("Pong expected to receive {} inputs, but it received {}.", params.expected, self.count);
        }
    =}
}

main reactor SavinaPong(count: u32(1000000)) {
    ping = new Ping(count=count);
    pong = new Pong(expected=count);
    ping.send -> pong.receive;
    pong.send -> ping.receive;
}
