target Rust {
    cargo-features: ["cli"],
    cargo-dependencies: {
        rand: "0.8",
        termcolor: "1",
        termion: "1",
        mazelib: {
            path: "/home/clem/Documents/Git/rs-maze"
        }
    }
};

main reactor MazeProgram(rows: usize(20), cols: usize(20), seed: u64(0)) {

    maze = new MazePrinter(rows=rows, cols=cols, seed=seed);

}


reactor MazePrinter(rows: usize(20), cols: usize(20), seed: u64(0)) {
    preamble {=
        use mazelib::*;
        use rand::rngs::StdRng;
        use rand::Rng;
        use rand::SeedableRng;
        use termion::event::Key;
    =}

    physical action key_press: Key;

    state player_pos: PlayerPos ({= PlayerPos::Cell(cell(0,0)) =});

    state maze: Maze({= {
        let mut rng = StdRng::seed_from_u64(seed);
        let mut maze = Maze::new(rows, cols, &mut rng);
        maze.generate_prim(&mut rng);
        maze
    } =});

    reaction(key_press) {=
        let side = match ctx.get(key_press).unwrap() {
            Key::Left => Side::WEST,
            Key::Right => Side::EAST,
            Key::Up => Side::NORTH,
            Key::Down => Side::SOUTH,
            _ => unreachable!(),
        };

        if self.maze.move_to(&mut self.player_pos, side) {
            // refresh screen
            self.maze.render_to_console(self.player_pos);
        }
    =}

    reaction(startup) -> key_press {=
        self.maze.render_to_console(self.player_pos);

        let stdin = std::io::stdin();

        let key_press = key_press.clone();
        ctx.spawn_physical_thread(move |link| {
            use termion::input::TermRead;
            use termion::raw::IntoRawMode;

            // enter raw mode, to get key presses one by one
            // this will stay so until this variable is dropped
            let stdout = std::io::stdout().into_raw_mode().unwrap();

            for c in stdin.keys() {
                match c.unwrap() {
                    k@(Key::Left | Key::Right | Key::Up | Key::Down) => {
                        trace!("received {:?}", k);
                        link.schedule_physical_with_v(&key_press, Some(k), Asap).unwrap();
                    },
                    Key::Ctrl('c') => {
                        // todo request stop! for now just exit raw mode
                        drop(stdout);
                        break;
                    },
                    k => {
                        trace!("received {:?}", k);
                    }
                }
            }
        });
    =}
}
