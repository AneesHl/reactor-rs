target Rust {
    cargo-features: ["cli"],
    cargo-dependencies: {
        rand: "0.8",
        termcolor: "1",
        termion: "1",
        bit-vec: "0.6"
    },
    rust-include: "maze.rs",
};

import KeyboardEvents from "KeyboardEvents.lf";

main reactor Maze(rows: usize(20), cols: usize(20), seed: u64(0)) {
    preamble {=
        use crate::maze::*;
        use rand::rngs::StdRng;
        use rand::Rng;
        use rand::SeedableRng;
        use termion::event::Key;
    =}

    keyboard = new KeyboardEvents();

    state player_pos: PlayerPos ({= PlayerPos::Cell(cell(0,0)) =});

    state maze: MazeModel({= {
        let mut rng = StdRng::seed_from_u64(seed);
        let mut maze = MazeModel::new(rows, cols, &mut rng);
        maze.generate_prim(&mut rng);
        maze
    } =});

    reaction(keyboard.arrow_key_pressed) {=
        let side = match ctx.get(key_presses__key).unwrap() {
            Key::Left => Side::WEST,
            Key::Right => Side::EAST,
            Key::Up => Side::NORTH,
            Key::Down => Side::SOUTH,
            _ => unreachable!(),
        };

        if self.maze.move_to(&mut self.player_pos, side) {
            // refresh screen
            self.maze.render_to_console(self.player_pos);
        }
    =}
}
